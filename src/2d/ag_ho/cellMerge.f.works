c
c ---------------------------------------------------------------------
c
       subroutine cellMerge(q,nvar,irr,mitot,mjtot,qx,qy,msize,lstgrd,
     .                      dx,dy,lwidth,xlow,ylow,istage,
     .                      ncount,numHoods)

       implicit double precision (a-h, o-z)
       include "cirr.i"

       dimension q(mitot,mjtot,nvar),  irr(mitot,mjtot)
       dimension qx(mitot,mjtot,nvar), qy(mitot,mjtot,nvar)
       dimension gradmx(mitot,mjtot,nvar), gradmy(mitot,mjtot,nvar)

       dimension valnew(mitot,mjtot,nvar), volMerge(mitot,mjtot)
       dimension qMerge(mitot,mjtot,nvar), numHoods(mitot,mjtot)
       dimension nCount(mitot,mjtot)
       dimension xcentMerge(mitot,mjtot),ycentMerge(mitot,mjtot)
       dimension fakeState(nvar), qm(nvar), rhs(2,nvar)
       dimension dumax(nvar),dumin(nvar),phimin(nvar)
       dimension a(2,2),b(2)
       real*8 minmod

       logical IS_GHOST, IS_FAR_GHOST, verbose/.false./
       logical quad, nolimiter
       common /order2/ ssw, quad, nolimiter

c  this next statement considers a ghost cell to be anything beyond the
c  loop indices, since they change according to the stage
       IS_GHOST(i,j) = (i .le. lwidth .or. i .gt. mitot-lwidth .or.
     .                  j .le. lwidth .or. j .gt. mjtot-lwidth)

c :::::::::::::;:::
c
c   try cell merging and reconstruction to stabilize updates in small cut cells
c   calculate all updates using provisional values, then actually do the update
c   (as in, jacobi rather than gauss seidel)
c ::::::::::::::::

c
       ar(-1) = 0.d0        ! zero out area of solid cells for this loop
       ar(lstgrd) = dx*dy   ! area of regular grid cell 
       qMerge   = 0.d0

       ! put in 'normal' values to prevent errors e.g. in converting to prim vars
       fakeState(1) = 1.d0
       fakeState(2) = 0.d0
       fakeState(3) = 0.d0
       fakeState(4) = 2.5d0

c     first make neighborhoods - need count for each cells, and width (nhood above)
c     nCount is size of neighborhood, numHoods is number of merged nhoods each cells is in
      call makeNHood(volMerge,xcentMerge,ycentMerge,ncount,irr,numHoods,
     .               mitot,mjtot,lwidth,lstgrd,xlow,ylow,dx,dy)   

       if (verbose) then
          totmass =  bigconck(q,irr,mitot,mjtot,lwidth,nvar)
          write(*,911) totmass
 911      format(/,"         mass before redistribution is ",e30.20)
       endif

c       form qMerge vals 
c       do 10 j = lwidth+1, mjtot-lwidth
c       do 10 i = lwidth+1, mitot-lwidth
        do 10 j = 1, mjtot
        do 10 i = 1, mitot
            if (irr(i,j) .eq. -1) go to 10 ! no solid cells
            if (irr(i,j) .eq. lstgrd .or. IS_GHOST(i,j)) then 
              qMerge(i,j,:) = q(i,j,:)
              go to 10 
            endif
c
c           sum in blocks of size 2*ncount on a size using only valid cells 
c
             do 27 joff = -ncount(i,j), ncount(i,j)
             do 27 ioff = -ncount(i,j), ncount(i,j)
                koff = irr(i+ioff,j+joff)
                if (koff .eq. -1) go to 27  ! solid cells dont contribute to neighborhood
                if (IS_GHOST(i+ioff,j+joff)) go to 27  ! nor ghost cells
c               count this cell 
                qMerge(i,j,:) = qMerge(i,j,:) + ar(koff)*
     .                        q(i+ioff,j+joff,:)/numHoods(i+ioff,j+joff)
 27          continue
             qMerge(i,j,:) = qMerge(i,j,:) / volMerge(i,j)

 10     continue

        ! gradient of merge neighborhoods, initialized to 0. set using neighboring merged tiels
        gradmx = 0.d0
        gradmy = 0.d0

        do 20 j = lwidth+1, mjtot-lwidth
        do 20 i = lwidth+1, mitot-lwidth
            k = irr(i,j)
            if (k .eq. -1) go to 20 ! solid cells have no gradient
            !! numHood=1 is its own neighborhood, no gradient needed
            if (numHoods(i,j) .eq. 1) go to 20 ! regular cell doesnt participate in anything
            !!if (k .eq. lstgrd .and. ncount(i,j) .eq. 0) then 
            if (ncount(i,j) .eq. 0) then 
            ! these should be all regular cells that are left
               nco = 1 ! need to use some kind of nhood to make gradient
            else 
               nco = ncount(i,j)
            endif

            ! can reconstruct high order poly here, but for now do linear reconstruction
            ! solving least squares problem with all neighboring merged vals. Should preprocess the matrix and save
            rhs = 0.d0 ! initialize for accumulation
            a = 0.d0
            x0 = xcentMerge(i,j)
            y0 = ycentMerge(i,j)
            do 22 joff = -nco, nco
            do 22 ioff = -nco, nco
                if (ioff .eq. 0 .and. joff .eq. 0) go to 22 ! no eqn to solve
                if (IS_GHOST(i+ioff,j+joff)) go to 22
                koff = irr(i+ioff,j+joff)
                if (koff .eq. -1) go to 22
               deltax = xcentMerge(i+ioff,j+joff) - x0
               deltay = ycentMerge(i+ioff,j+joff) - y0
               a(1,1) = a(1,1) + deltax*deltax
               a(1,2) = a(1,2) + deltax*deltay
               a(2,2) = a(2,2) + deltay*deltay
               rhs(1,:) = rhs(1,:) + deltax * 
     .                    (qMerge(i+ioff,j+joff,:) - qMerge(i,j,:))
               rhs(2,:) = rhs(2,:) + deltay * 
     .                    (qMerge(i+ioff,j+joff,:) - qMerge(i,j,:))
 22          continue

             ! solve a^t*a  * grad = a^t rhs.  First form cholesky factors.
             ! will have to add robustness checks
             c11 = sqrt(a(1,1))
             c12 = a(1,2) / c11
             c22 = sqrt(a(2,2) - c12**2)

             ! now back solve (C^t C = rhs of A^tdu ) to get x and y gradient for all variables
             do m = 1, nvar
               b(1) = rhs(1,m) / c11
               b(2) = (rhs(2,m) - c12*b(1))/c22
               gradmy(i,j,m) = b(2) / c22
               gradmx(i,j,m) = (b(1) - c12*gradmy(i,j,m))/c11
             end do
 20     continue

c
c      apply limiter if requested. Go over all neighbors, do BJ
        if (nolimiter) go to 35
        do 30 j = lwidth+1, mjtot-lwidth
        do 30 i = lwidth+1, mitot-lwidth
            k = irr(i,j)
            if (k .eq. -1) go to 30 ! solid cells have no gradient
            if (numHoods(i,j) .eq. 1) go to 30  ! CHECK THAT NOTHING TO DO AND VAL NOT CHANGED
            nco = ncount(i,j)

            ! find max and min needed for BJ limiting
            dumax = 0.d0 
            dumin = 0.d0
            do 31 joff = -nco, nco
            do 31 ioff = -nco, nco
              if (ioff .eq. 0 .and. joff .eq. 0) go to 31
              if (IS_GHOST(i+ioff,j+joff)) go to 31
              koff = irr(i+ioff,j+joff)
              if (koff .eq. -1) go to 31
              dumax = max(dumax,qmerge(i+ioff,j+joff,:)-qmerge(i,j,:))
              dumin = min(dumin,qmerge(i+ioff,j+joff,:)-qmerge(i,j,:))
 31         continue

            phimin = 1.d0
            do 32 joff = -nco, nco
            do 32 ioff = -nco, nco
                if (ioff .eq. 0 .and. joff .eq. 0) go to 32 ! no eqn to solve
                if (IS_GHOST(i+ioff,j+joff)) go to 32
                koff = irr(i+ioff,j+joff)
                if (koff .eq. -1) go to 32
                ! use merged val at ioff,joff to limit
                diffx = xcentMerge(i+ioff,j+joff)-xcentMerge(i,j)
                diffy = ycentMerge(i+ioff,j+joff)-ycentMerge(i,j)
                do m= 1, 4
                   graddot  = gradmx(i,j,m)*diffx + gradmy(i,j,m)*diffy
                   recon = q(i,j,m) + graddot  
                   if (graddot > 0.d0) then
                      alpha = min(1.d0, dumax(m)/graddot)
                   else if (graddot < 0.d0) then
                      alpha = min(1.d0, dumin(m)/graddot)
                   else
                      alpha = 1.d0
                   endif
                   ! one last check for positivity
                   if (m .eq. 1 .and. recon .le. 0.d0) alpha = 0.d0
                   if (m .eq. 4) then
                   endif
                   phimin(m) = min(phimin(m),alpha)
                end do
 32         continue
            gradmx(i,j,:) = gradmx(i,j,:)*phimin(:)
            gradmy(i,j,:) = gradmy(i,j,:)*phimin(:)
 30     continue

 
c      gradmx = 0.d0  
c      gradmy = 0.d0 
c
      ! redo neighborhood calc as in makeNHoods but putting merged vals INTO cells
      ! instead of getting FROm cells. have to do it this way because a cell doesn't 
      ! know which cells contribute TO it, only the giving cell knows.

 35   continue

      valnew = 0.d0  !  all cells initialized to 0

      do 50 j = 1, mjtot
      do 50 i = 1, mitot
          k = irr(i,j)
          if (k .eq. -1) then
             ! set valnew to 'robust' fake state
             valnew(i,j,:) = fakeState
             go to 50  ! does not contribute
          endif
          if (IS_GHOST(i,j)) then
             ! set valnew to 'robust' fake state
             valnew(i,j,:) = qmerge(i,j,:)  ! copy from what came in
             go to 50  ! does not contribute
          endif
          if (k .eq. lstgrd .and. numHoods(i,j) .eq. 1) then ! doesnt participate in anything
             valnew(i,j,:) = qMerge(i,j,:)
             go to 50  
          endif
          do 40 joff = -ncount(i,j), ncount(i,j)
          do 40 ioff = -ncount(i,j), ncount(i,j)
             if (IS_GHOST(i+ioff,j+joff)) go to 40  
             koff = irr(i+ioff,j+joff)
             if (koff .eq. -1) go to 40  
             call getCellCentroid(i+ioff,j+joff,xc,yc,xlow,ylow,dx,dy,
     .                            koff,lstgrd)
             qm(:) = qMerge(i,j,:) + (xc-xcentMerge(i,j))*gradmx(i,j,:) 
     .                             + (yc-ycentMerge(i,j))*gradmy(i,j,:)
             valnew(i+ioff,j+joff,:) = valnew(i+ioff,j+joff,:) + 
     .              qm(:)/numHoods(i+ioff,j+joff)
 40       continue

 50    continue

c
       q = valnew
c
       if (verbose) then
          totmass2 =  bigconck(q,irr,mitot,mjtot,lwidth,nvar)
          dif = totmass2 - totmass

          write(*,912) totmass2,dif
 912      format("         mass after  redistribution is ",e30.20,
     .           "  dif is ",e15.7)
       endif

       return
       end
c
c ----------------------------------------------------------------------------
c
      function bigconck(q,irr,mitot,mjtot,lwidth,nvar)
c
      implicit double precision (a-h,o-z)
      include "cirr.i"

      dimension q(mitot,mjtot,nvar), irr(mitot,mjtot)

      totmass = 0.d0
      ar(-1)  = 0.d0

      do 10 j = lwidth+1, mjtot-lwidth
      do 10 i = lwidth+1, mitot-lwidth

         k = irr(i,j)
         totmass = totmass + q(i,j,1)*ar(k)

 10   continue

      bigconck = totmass

      return
      end

c
c ----------------------------------------------------------------------------
c
      subroutine makeNHood(volMerge,xcentMerge,ycentMerge,ncount,irr,
     .                     numHoods,mitot,mjtot,lwidth,lstgrd,xlow,ylow,
     ,                     dx,dy)

      implicit double precision (a-h, o-z)
      include "cirr.i"

      dimension numHoods(mitot,mjtot), volMerge(mitot,mjtot)
      dimension xcentMerge(mitot,mjtot), ycentMerge(mitot,mjtot)
      dimension ncount(mitot,mjtot), irr(mitot,mjtot)

      logical IS_GHOST, firstTimeThru
      IS_GHOST(i,j) = (i .le. lwidth .or. i .gt. mitot-lwidth .or.
     .                 j .le. lwidth .or. j .gt. mjtot-lwidth)

      ! merge until vmerge at least this big (analogous to 1d where left and right nhoods each dx
      !!areaMin = 2.d0*ar(lstgrd)  
      areaMin = 0.5d0*ar(lstgrd)  
      numHoods = 0  ! initialize, loop below will add each cell to its own nhood
      ncount = 0
      ar(-1) = 0.d0  ! reset here to remind us

      do 10 j = lwidth+1, mjtot-lwidth
      do 10 i = lwidth+1, mitot-lwidth

         k = irr(i,j)  
         if (k .eq. -1) go to 10
         if (k .eq. lstgrd) then
            numHoods(i,j) =  numHoods(i,j) + 1
            go to 10 ! a full  flow cell is its own merged neighborhood
         endif
         vmerge = 0.d0
         firstTimeThru = .true.
         nco = 0   ! initial size of neighborhood, from -1 to 1 square centered on cell

            do while (vmerge < areaMin) 
               do 15 joff = -nco, nco
               do 15 ioff = -nco, nco
                   if (IS_GHOST(i+ioff,j+joff)) go to 15  
                   koff = irr(i+ioff,j+joff)
                   if (koff .eq. -1) go to 15  ! solid cells dont help
                   vmerge = vmerge + ar(koff)
                   if (firstTimeThru) then ! count everybody
                      numHoods(i+ioff,j+joff)=numHoods(i+ioff,j+joff)+1
                   else ! only add to new cells-on newly enlarged nhood border
                     if (abs(ioff).eq. nco .or. abs(joff).eq.nco)
     .                numHoods(i+ioff,j+joff)=numHoods(i+ioff,j+joff)+1
                   endif
 15             continue
                if (vmerge > areaMin) then
                   ncount(i,j) = nco
                   go to 10
                else   ! redo with larger neighborhood
                   nco = nco + 1
                   vmerge = 0.d0
                   firstTimeThru = .false.
                endif
            end do
             
 10   continue      


c     needed number of neighbhoods to compute volMerge = which is not
c     the real volume of the merging neighborhood
c

!   initialize array with  most common case, overwritten below as needed
      volMerge = ar(lstgrd) 
      xcentMerge = 0.d0      
      ycentMerge = 0.d0

      do 20 j = 1, mjtot
      do 20 i = 1, mitot
         k = irr(i,j)  
         if (k .eq. lstgrd) then
             call getCellCentroid(i,j,xcentMerge(i,j),ycentMerge(i,j),
     .                            xlow,ylow,dx,dy,k,lstgrd)
             go to 20 ! a full  flow cell is its own merged neighborhood
         endif
         if (IS_GHOST(i,j)) then
            volMerge(i,j) = 0.d0
            go to 20
         endif
         if (k .eq. -1) then
            volMerge(i,j) = 0.d0
            go to 20
         endif

         vmerge = 0.d0
         xcent = 0.d0
         ycent = 0.d0
         nco = ncount(i,j)
         do 25 joff = -nco, nco
         do 25 ioff = -nco, nco
            if (IS_GHOST(i+ioff,j+joff)) go to 25  
            koff = irr(i+ioff,j+joff)
            if (koff .eq. -1) go to 25 ! solid cells dont help
            call getCellCentroid(i+ioff,j+joff,xc,yc,xlow,ylow,
     .                           dx,dy,koff,lstgrd)
            vmerge = vmerge +  ar(koff)/numHoods(i+ioff,j+joff)
            xcent = xcent + xc*ar(koff)/numHoods(i+ioff,j+joff)
            ycent = ycent + yc*ar(koff)/numHoods(i+ioff,j+joff)

 25      continue
         volMerge(i,j) = vmerge
         xcentMerge(i,j) = xcent/vmerge
         ycentMerge(i,j) = ycent/vmerge
             
 20   continue



      return
      end
c
c -------------------------------------------------------------------------
c
      subroutine getCellCentroid(i,j,xc,yc,xlow,ylow,dx,dy,k,lstgrd)

      implicit double precision (a-h,o-z)
      include "cirr.i"

      if (k .eq. lstgrd) then
         xc = xlow + (i-0.5d0)*dx
         yc = ylow + (j-0.5d0)*dy
      else if (k .eq. -1) then
         xc = 0.d0
         yc = 0.d0
      else
         xc = xcirr(k)
         yc = ycirr(k)
      endif

      return
      end
c
c -------------------------------------------------------------------
c
      double precision function minmod(a,b)
      double precision a, b, ans


      if (a*b <= 0.d0) then
        ans = 0.d0
      else if (a .gt. 0.d0 .and. b .gt. 0.d0) then
        ans = min(a,b)
      else
        ans = max(a,b)
      endif

      minmod = ans
      return
      end
